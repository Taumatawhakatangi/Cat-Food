const gulp = require('gulp')   // с помощью рекваер подключаем этот плагин
const less = require('less')
const del = require('del')
const browserSync = require('browser-sync').create();

const path = {   // В это переменной мы будем хранить пути до наших файлов
    styles: {
        //  /** - это означает что тут мы обращаемся ко всем папкам и вложенностям а  *.less   Это означает что мы не знаем название файла а знаем только его расширение или что мы обращаемся ко все файлам а этой папке
        src: 'src/styles/**/*.less',
        dest: 'dist/assets/css/'        // здесь мы строим файловую систему и указываем пути куда сохраняться скомпилированные файлы
    }                                 
}



function clean() {         // функция для очистка каталога
    return del(['dist', '!dist/img'])   // в скобках передаем то что мы хотим очистить
} // !dist/img это означает что кроме папки с картинками ! это знак отрицания

function styles() {   // Обработка стилей поиск их и компиляция 
    return gulp.src(paths.styles.src) // путь к файлу как бы по ключам изначальный путь где стили находятся  Pipe это штука позволяет выполнять действия шаги разные
        .pipe(sourcemaps.init()) // инициализация sourcemaps карты
        .pipe(less())      //  вызываем переменную с лесс и компилируем в css
        .pipe(autoprefixer({ // добавляем после препроцессора автоперфиксер для ститей под браузеры
			cascade: false
		}))
        .pipe(cleanCss({ // удаляем пробелы ненужные строки и т.д. минифицируем файл
            level: 2    //  это один из видов как будет выглядеть минифицированный файл
        }))  
        .pipe(rename({     //  изменяем название файла 
            basename: 'main', // добавляем вот такое название
            suffix: '.min'    // добавляем к названию после него еще доп слово  можно и до добавялть префикс то есть
        }))
        .pipe(sourcemaps.write(.))  // создается карта а именно main.min.css.map при помощи нее мы все и видим
        .pipe(size()) // эта строчка относитяс к плагину gulp size подключается перед компиляцией Показывае вес
        .pipe(gulp.dest(paths.styles.dest))      //   тут мы говорим куда отправляется готовый файл при выполнении команды галп
        .pipe(browserSync.stream());  //  Добавляем везде после строки создания итогого файла html css js img это 

}

function scripts() { // функция для обработки скриптов
    return gulp.src(paths.scripts.src)
    .pipe(sourcemaps.init())
    .pipe(babel({
        presets: ['@babel/env'] // это настройка чтобы babel этот заработал
    }))  // 
    .pipe(uglify()) // минифицирует джс файл
    .pipe(concat('main.min.js')) // это вместо rename то есть сразу объеденяются все джс файлы и дается конкректное название для готового файла
    .pipe(size()) // эта строчка относитяс к плагину gulp size подключается перед компиляцией Показывае вес
    .pipe(gulp.dest(paths.scripts.dest))  // Указываем путь куда готовые файлы отправляются
}

function img() { 
    gulp.src('src/images/*')
    .pipe(imagemin({
        progressive: true // это штука лучше сжимает изображения чтобы это не значило
    }))
    .pipe(size()) // эта строчка относитяс к плагину gulp size подключается перед компиляцией Показывае вес
    .pipe(gulp.dest('dist/images'))
}

function watch() {    // функция для отслеживания изменений
    browserSync.init({
        server: {
            baseDir: "./"   // показывает изменения в итоговом файле без перезагрузки
        }
    });
    gulp.watch(paths.html.src).on('change',browserSync.reload) // html отдельно потому что он не находится в папке src
    gulp.watch(paths.styles.src, styles)        // указываем путь к тому что надо отслеживать
    gulp.watch(paths.scripts.src, scripts) // тут мы следим за папкой за скриптами и случае добавления там кода то отрабатывается  задача-scripts          
} // styles это таск который выполнится в случае изменений в этом каталоге


 






// Экспортируем все функцию чтобы иметь возможность их отдельно запускать через галп при необъходимости
exports.clean = clean  // проверяем функцию. Она очищает каталог дист. Создаем возможность Вызывать функцию в терминале gulp clean
exports.styles = styles  // опять же мэкспотируем эту функцию и можем вызвать ее для проверки gulp styles   Это тасками называют еще
exports.watch = watch
exports.build = build
exports.default = build  // дефолт это задача по умолчанию то есть gulp! Мы прописываем что происходит когда мы вводим команду gulp

сonst build = gulp.series(clean, gulp.parallel(styles, scripts), watch)
// тут мы выполняем очистки затем паралельно выполняем скрипты и стили запускается отслеживатель изменений в стилях и скриптах

const build = gulp.series() // Этa функция позвляет прописать последовательность действий, тасков
const build = gulp.paralael() // бывает еще так, выполнять паралельно таски для быстроты


// function defaultTask(cb) {
//     // place code for your default task here
//     cb();
//   }

//   exports.default = defaultTask  //   имеем возможность экспортировать функции и выполнять их в командной строке
